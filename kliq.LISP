(defvar user nil)
(defvar cuser nil)
(defun listeni()
        (format t "~%You-> ")
	(defvar q nil)
	(defvar c nil)
	(setf q nil) 
	(loop (setf c (read))
		(when (string-equal c "done")(return nil))
			(push c q))
	(setf user nil)
	(dolist (e q)(push e user))
	(breakdown)
        (listeni))
(defmacro in (ob)
	(dolist (e user)(cond ((string-equal ob e)(return t)))))
(defmacro intc (ob)
	(dolist (e cuser)(cond ((string-equal ob e)(return t)))))
(defun div(ob)
        (setf cuser nil)
        (dolist (e user)(if (string-equal e ob)(progn (setf user (cdr user))(return nil))(progn (push e cuser)(setf user (cdr user)))))
        (setf cuser (reverse cuser)))
(defun breakdown()
	(cond ((in "and")(loop (when (not (in "and"))(progn (setf cuser user)(subject)(return nil)))(progn (div "and")(subject)))) 
              ((not (in "and"))(progn (setf cuser user)(subject))))
        (question))
(defun question()
	(cond ((in "who")(about))
              ((in "what")(thing))
              ((in "how")(way))
              ((in "why")(reason))))
(defun check()
  (setf h (cdr user))
	(dotimes (e (- (length user) 3))(setf h (cdr h)))
	(setf h (car h)))
(defmacro check-tense()
        (cond ((intc "is")(progn (setf ten 'present)(setf tense "is")))
              ((intc "are")(progn (setf ten 'present)(setf tense "are")))
              ((intc "was")(progn (setf ten 'past)(setf tense "was")))
              ((intc "were")(progn (setf ten 'past)(setf tense "were")))
              ((and (intc "has")(intc "been"))(progn (setf ten 'pastperfect)(setf tense "has")))
              ((and (intc "have")(intc "been"))(progn (setf ten 'presentperfect)(setf tense "have")))
              ((and (intc "had")(intc "been"))(progn (setf ten 'pastperfect)(setf tense "had")))))
(defun reason()
        (cond ((string-equal "you" sub)(self "created for no reason"))))
(defun way()
        (cond ((string-equal "you" sub))(self "Fine,Gracious and delightful")))  
(defun thing()
        (cond ((string-equal "you" sub)(self "a Program"))))
(defun about()
	(cond ((string-equal "you" sub)(self "kliq-san"))))
(defun self(per)
	(format t "~%kliq-> I am ~a (@___@)." per))
(defun subject()
        (check-tense)
        (defvar fsub nil)
        (defvar sub nil)
        (defvar predi nil)
        (setf fsub nil)
        (push (car cuser) fsub)
        (setf pre (cdr cuser))
        (loop (when (equal (length pre) 0)(return nil))(when (string-equal (car pre) tense)(return nil))(push (car pre) fsub)(setf pre (cdr pre)))
        (setf pre (cdr pre))
        (if (string-equal (car pre) "been")(setf pre (cdr pre)))
        (setf sub (cons sub (reverse fsub)))
        (if (not (car sub))(setf sub (cdr sub)))
        (setf predi (cons predi pre))
        (if (not (car predi))(setf predi (cdr predi))))
	


