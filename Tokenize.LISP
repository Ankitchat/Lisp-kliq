(load "C:/Users/welcome/quicklisp/setup.lisp")
(ql:quickload :cl-redis)
(ql:quickload :trivial-shell)

(use-package :redis)


(redis:connect :host "localhost")

(defvar ctense "")
(defvar sentence_type "Imperative")
(defvar about nil)
(defvar about_char nil)
(defvar about_char2 nil)
(defvar about_char3 nil)
(defvar subject)
(defvar to (red-get "firstperson"))
(defvar greet nil)
(setf pronouns (list "he" "she" "him" "her" "it" "his" "they" "them" "I" "me" "you" "your"))
(setf checkten (list "is" "are" "will" "was" "would" "were" "am"))
(setf question (list "what" "who" "where" "how" "why"))
(setf greetings (list "Hi" "Hello" "Yo" "Good Morning" "Good Evening" "Good Afternoon" "Good Night"))

(defun true_word(word)
	(if (search "?" word) (setf word (remove #\? word)))
	(if (search "!" word) (setf word (remove #\! word)))
	(if (search "." word) (setf word (remove #\. word)))
	(return-from true_word word)
		)

(defun in (pro ob)
	(dolist (e pro)(cond ((equalp ob e)(return t)))))

(defun noun(word)
	(trivial-shell:shell-command (concatenate 'string "python F:/Lisp/Verb_Check.py \"" word "\""))
	(format t  "~a is ~a~%" word (red-get "CheckAns"))
	(if (string= (red-get "CheckAns") "noun")
		(return-from noun t)
		(return-from noun nil)
		))

(defun setfirstperson(name)
		(if (noun name)
			(red-set "firstperson" name))
	)

(defun tense(any)
	(if (in checkten any)
		(if (red-exists any)
				(if (not (equalp (red-type any) "list"))
						(setf ctense (concatenate 'string ctense (red-get any))))
				))
	)

(defun sentence_analyze(part)
	(cond 
		((and (or (in question part)(search "?" part))(not (equalp sentence_type "Exclamatory")))
			(progn 
				(setf sentence_type "Interrogative")
				(if (red-exists part)
					(if (equalp (red-type part) "list")
							(setf about (car (red-lrange part 0 -1)))
							))))
		((and (in pronouns part) (equalp sentence_type "Imperative"))
			(setf sentence_type "Declarative"))
		((search "!" part)
			(setf sentence_type "Exclamatory"))
		((if (in greetings part)
			(multiple-value-bind
				(second minute hour date month year day-of-week dst-p tz)
				(get-decoded-time)
				(cond
					((if (and (>= hour 6) (< hour 12))
						(setf greet "Good Morning~~")))
					((if (and (>= hour 12) (< hour 17))
						(setf greet "Good AfterNoon~~")))
					((if (and (>= hour 17) (< hour 20))
						(setf greet "Good Evening~~")))
					((if (or (>= hour 20) (< hour 6))
						(setf greet "Good Night~~")))
					))
				))
			)
	)

(defun pronoun_analyze(part)
	(if (in pronouns part)
		(if (red-exists part)
				(if (equalp (red-type part) "list")
					(progn
						(setf about_char (car (red-lrange part 0 -1)))
						(setf about_char2 (cadr (red-lrange part 0 -1)))
						(setf about_char3 (caddr (red-lrange part 0 -1)))
						)
					(setf to (red-get part)))
				)
	))

(defun parse(talk)
	(dolist (any talk)
		(tense any)
		(sentence_analyze any)
		(setf any (true_word any))
		(pronoun_analyze (string-downcase any))
		(if (and (in talk "I") (in talk "am") (not (in pronouns any)) (noun any))
			(setfirstperson any))
			))


(parse *args*)
(format t "Tense is ~a~%" ctense)
(format t "Sentence is ~a~%" sentence_type)
(format t "It is to ~a~%" to)
(format t "It is about ~a~%" about)
(format t "It is about ~a~%" about_char)
(format t "It is about ~a~%" about_char2)
(format t "It is about ~a~%" about_char3)
(if greet
	(format t "~a ~a~%" greet (red-get "firstperson")))
